generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  OWNER
  ADMIN
  MANAGER
  CHEF
  CASHIER
  WAITER
  CLIENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  VERIFIED
  NOT_VERIFIED
}

enum OrderStatus {
  RECEIVED
  IN_PREPARATION
  READY
  DONE
  CANCELED
}

model Restaurant {
  id String @id @default(uuid())
  name String
  address String?
  phoneNumber String?
  owners User[] @relation("RestaurantOwners")
  branches Branch[]
  createdAt DateTime? @default(now())
}

model Branch {
  id String @id @default(uuid())
  name String
  address String?
  phoneNumber String?
  restaurantId String
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  users User[]
  createdAt DateTime? @default(now())
}

model User {
  id String @id @default(uuid())
  fullName String?
  email String? @unique
  password String?
  role Role
  status UserStatus
  verificationToken String?
  oauth Boolean @default(false)
  branchId String?
  branch Branch? @relation(fields: [branchId], references: [id])
  ownedRestaurantId String?
  ownedRestaurant Restaurant? @relation("RestaurantOwners", fields: [ownedRestaurantId], references: [id])
  resetPasswordToken  String?
  resetPasswordExpires DateTime?
  categories Category[]
  products Product[]
  orders Order[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Category {
  id String @id @default(uuid())
  name String
  image String?
  products Product[]
  userId String
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime? @default(now())
}

model Product {
  id String @id @default(uuid())
  name String
  description String?
  price Float
  image String?
  variants Json?
  ingredients Json?
  orderItems OrderProduct[]
  categoryId String
  category Category?  @relation(fields: [categoryId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime? @default(now())
}

model Order {
  id String @id @default(uuid())
  total Float
  table String
  delivery Boolean @default(false)
  status OrderStatus
  date DateTime @default(now())
  orderReadyAt DateTime?
  orderProducts OrderProduct[]
  userId String
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime? @default(now())
}

model OrderProduct {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  spicyLevelNumber Int?
}